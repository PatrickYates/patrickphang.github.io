<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Git常见操作(完整提交步骤)]]></title>
      <url>https://patrickphang.github.io/2017/01/03/Git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C-%E5%AE%8C%E6%95%B4%E6%8F%90%E4%BA%A4%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<h2 id="从已有的Git仓库中克隆一个本地的镜像仓库："><a href="#从已有的Git仓库中克隆一个本地的镜像仓库：" class="headerlink" title="从已有的Git仓库中克隆一个本地的镜像仓库："></a>从已有的Git仓库中克隆一个本地的镜像仓库：</h2><pre><code>`git clone https://github.com/YourAccountName/name.git`
</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="自己新建一个仓库并上传到远程仓库："><a href="#自己新建一个仓库并上传到远程仓库：" class="headerlink" title="自己新建一个仓库并上传到远程仓库："></a>自己新建一个仓库并上传到远程仓库：</h2><ol>
<li><code>git init</code> -&gt; 初始化新的仓库</li>
<li><p><code>git add README.md</code> -&gt; 将新加入的untracked状态的文件加入跟踪并放入暂存区///将已修改的文件放入暂存区<br><code>git add .</code> -&gt; 操作所有文件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">        new file:   a01.txt</div></pre></td></tr></table></figure>
</li>
<li><p><code>git commit -m &quot;第一次提交&quot;</code> -&gt; 将暂存区中的文件提交至HEAD所指向的分支，暂存区的文件将回到未修改状态  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[master (root-commit) af05048] 第一次</div><div class="line"> 1 file changed, 3 insertions(+)</div><div class="line"> create mode 100644 a01.txt</div></pre></td></tr></table></figure>
<p>  当修改文件时:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">    On branch master</div><div class="line">    Changes not staged for commit:</div><div class="line">      (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">      (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">            modified:   a01.txt</div><div class="line"></div><div class="line">    no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div><div class="line">    Untracked files:</div><div class="line">        (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">        a02.txt</div><div class="line"></div><div class="line">        no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)```  </div><div class="line">      其他常见方法：</div><div class="line">    `git status` -&gt; 查看仓库中文件的状态  </div><div class="line">    `git rm a01.txt` -&gt; 将已跟踪的文件从Git中移除  </div><div class="line">    `git checkout -- a01.txt` -&gt; 恢复被删除的文件(未被commit)  </div><div class="line">    `git reset HEAD readme.txt` -&gt; 恢复被修改的文件(未被commit),并不会更改文件内容，只是使之回到已修改状态  </div><div class="line">    `git commit --amend -m a01.txt` -&gt; 恢复被删除的文件(已被commit)</div><div class="line"></div><div class="line">4. `git remote add origin https://github.com/YourAccountName/name.git` -&gt; 这样就可以用origin这个名字来引用添加的远程仓库  </div><div class="line"></div><div class="line">5. `git fetch origin` -&gt; 并不能看到工作目录下有任何变化，只是把远程的数据抓取到本地，而不会把改动合并到当前的分支上  </div><div class="line">`git pull https://github.com/YourAccountName/name.git` -&gt; 把远程仓库抓取到本地，并合并本地master分支</div><div class="line"></div><div class="line">6. `git push -u origin master` -&gt; 将本地的数据更新到远程仓库中  </div><div class="line">`git push` -&gt; 以后直接使用</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">----------------</div><div class="line">##遇到的错误(慢慢更新......)</div><div class="line">### 1. git push origin master</div></pre></td></tr></table></figure>
</li>
</ol>
<p>To <a href="https://github.com/PatrickYates/patrickyates.github.com.git" target="_blank" rel="external">https://github.com/PatrickYates/patrickyates.github.com.git</a><br> ! [rejected]        master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘<a href="https://github.com/PatrickYates/patrickyates" target="_blank" rel="external">https://github.com/PatrickYates/patrickyates</a><br>.github.com.git’<br>hint: Updates were rejected because the tip of your current branch is behind<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* 解决办法：当前的本地仓库不是最新的，应该pull到本地</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">### 2. git pull https://github.com/YourAccountName/name.git</div></pre></td></tr></table></figure></p>
<p>From <a href="https://github.com/YourAccountName/name.git" target="_blank" rel="external">https://github.com/YourAccountName/name.git</a></p>
<ul>
<li>branch            HEAD       -&gt; FETCH_HEAD<br>fatal: refusing to merge unrelated histories<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>git pull <a href="https://github.com/YourAccountName/name.git" target="_blank" rel="external">https://github.com/YourAccountName/name.git</a><br>warning: no common commits<br>remote: Counting objects: 60, done.<br>remote: Compressing objects: 100% (51/51), done.<br>remote: Total 60 (delta 1), reused 60 (delta 1), pack-reused 0<br>Unpacking objects: 100% (60/60), done.<br>From <a href="https://github.com/YourAccountName/name.git" target="_blank" rel="external">https://github.com/YourAccountName/name.git</a></p>
<ul>
<li>branch            HEAD       -&gt; FETCH_HEAD<br>fatal: refusing to merge unrelated histories```<ul>
<li>解决办法：本地代码与远程仓库代码完全不同，无法合并  </li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<h2 id="其他Github精华教程："><a href="#其他Github精华教程：" class="headerlink" title="其他Github精华教程："></a>其他Github精华教程：</h2><ol>
<li><a href="http://try.github.io/levels/1/challenges/1" target="_blank" rel="external">交互编程-15分钟学会github</a>  </li>
<li><a href="https://github.com/numbbbbb/progit-zh-pdf-epub-mobi" target="_blank" rel="external">书籍-重量级教程progit</a>  </li>
<li><a href="https://github.com/blynn/gitmagic/tree/master/zh_cn" target="_blank" rel="external">书籍-git magic</a>  </li>
<li><a href="http://www.yangzhiping.com/tech/github.html" target="_blank" rel="external">教程-如何高效利用GitHub</a>  </li>
<li><a href="http://gitimmersion.com/" target="_blank" rel="external">教程-git immersion</a><br><a href="http://igit.linuxtoy.org/contents.html" target="_blank" rel="external">中文版</a></li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.jianshu.com/p/555e7a188312" target="_blank" rel="external">必须要会的Git基本使用及常用命令操作</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[reqwest库的使用]]></title>
      <url>https://patrickphang.github.io/2017/01/03/reqwest%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a> 
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/reqwest/2.0.5/reqwest.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello There!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">            var a = &#123;&#125;</div><div class="line">            reqwest(&#123;</div><div class="line">                url:"http://swapi.co/api/people/1/",</div><div class="line">                type:"json",</div><div class="line">                method:"get",</div><div class="line">                data:&#123;tag:"life"&#125;,</div><div class="line">                success:function (resp) &#123;</div><div class="line">                    a = resp</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫爬取极客学院]]></title>
      <url>https://patrickphang.github.io/2017/01/03/Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E6%9E%81%E5%AE%A2%E5%AD%A6%E9%99%A2/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://github.com/gaopu/Python/blob/master/downMp4OfJiKeXueYuan.py" target="_blank" rel="external">github</a><br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request, urllib.parse, os, urllib, http.cookiejar, re</div><div class="line"></div><div class="line"><span class="comment"># 下载极客学院的视频</span></div><div class="line"><span class="comment"># 需要一个vip账号(验证邮箱和手机会有体验vip)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownCourse</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="comment"># 给urllib添加cookie支持</span></div><div class="line">	<span class="comment"># path: 下载的视频要保存的文件夹</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,path)</span>:</span></div><div class="line">		<span class="comment"># 初始化一个CookieJar来处理Cookie</span></div><div class="line">		cookieJar = http.cookiejar.CookieJar()</div><div class="line">		<span class="comment"># 实例化一个全局opener</span></div><div class="line">		opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookieJar))</div><div class="line">		<span class="comment"># 把这个cookie处理机制装上去,大概是这个意思-.-</span></div><div class="line">		urllib.request.install_opener(opener)</div><div class="line"></div><div class="line">		self.folderPath = path</div><div class="line">		<span class="comment"># 判断文件夹是否存在</span></div><div class="line">		folderExists = os.path.exists(self.folderPath)</div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> folderExists:</div><div class="line">			os.mkdir(self.folderPath)</div><div class="line"></div><div class="line">	<span class="comment"># 登陆函数</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="comment"># 从登录页面获取登陆参数</span></div><div class="line">		login_url = <span class="string">'http://passport.jikexueyuan.com/sso/login'</span></div><div class="line">		<span class="comment"># 登陆信息发送到这个地址</span></div><div class="line">		passport_url = <span class="string">'http://passport.jikexueyuan.com/submit/login?is_ajax=1'</span></div><div class="line">		verifyCode_url = <span class="string">'http://passport.jikexueyuan.com/sso/verify'</span></div><div class="line"></div><div class="line">		<span class="comment"># 获取登陆页面源码</span></div><div class="line">		request = urllib.request.urlopen(login_url)</div><div class="line">		html = request.read()</div><div class="line">		request.close()</div><div class="line"></div><div class="line">		<span class="comment"># 获取登陆要post的数据</span></div><div class="line">		expire = re.search(<span class="string">r"(?s)value='(.*?)' name='expire"</span>,html)</div><div class="line">		<span class="comment"># 验证码</span></div><div class="line">		verifyCodeGifPath = <span class="string">'/tmp/jikexueyuan.gif'</span></div><div class="line">		request = urllib.request.urlopen(verifyCode_url)</div><div class="line">		gif = request.read()</div><div class="line">		request.close()</div><div class="line">		fGif = open(verifyCodeGifPath,<span class="string">'w'</span>)</div><div class="line">		fGif.write(gif)</div><div class="line">		fGif.close()</div><div class="line">		<span class="comment"># 读取保存到本地的验证码图片</span></div><div class="line">		os.system(<span class="string">'eog '</span> + verifyCodeGifPath)</div><div class="line">		verify = input(<span class="string">"请输入图中的验证码:"</span>)</div><div class="line"></div><div class="line">		data = &#123;</div><div class="line">			<span class="string">'expire'</span>: expire.group(<span class="number">1</span>),</div><div class="line">			<span class="string">'referer'</span>: <span class="string">'http%3A%2F%2Fwww.jikexueyuan.com%2F'</span>,</div><div class="line">			<span class="string">'uname'</span>: <span class="number">15850673601</span>,</div><div class="line">			<span class="string">'password'</span>: pengxiaoye,</div><div class="line">			<span class="string">'verify'</span>: verify,</div><div class="line">		&#125;</div><div class="line">		post_data = urllib.parse.urlencode(data)</div><div class="line"></div><div class="line">		request = urllib.request.Request(passport_url,post_data)</div><div class="line">		<span class="comment"># 给一个useragent,防止被认为是爬虫程序</span></div><div class="line">		request.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36'</span>)</div><div class="line">		<span class="comment"># 发送登录请求</span></div><div class="line">		request = urllib.request.urlopen(request)</div><div class="line">		request.close()</div><div class="line">		print(<span class="string">'登陆完成'</span>)</div><div class="line"></div><div class="line">	<span class="comment"># courseUrl: 课程地址首页,例如:http://www.jikexueyuan.com/course/989.html</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self, courseUrl)</span>:</span></div><div class="line">		<span class="comment"># 获取课程名称</span></div><div class="line">		request = urllib.request.urlopen(courseUrl)</div><div class="line">		coursePageHtml = request.read()</div><div class="line">		request.close()</div><div class="line">		courseName = re.search(<span class="string">r'(?s)&lt;title&gt;(.*?)-'</span>,coursePageHtml).group(<span class="number">1</span>)</div><div class="line">		<span class="comment"># 课程数量</span></div><div class="line">		courseCount = int(re.search(<span class="string">r'(?s)class="timebox"&gt;&lt;span&gt;(.*?)课时'</span>,coursePageHtml).group(<span class="number">1</span>))</div><div class="line">		<span class="comment"># 存储视频的文件夹路径</span></div><div class="line">		folderPath = self.folderPath + courseName + <span class="string">'/'</span></div><div class="line">		<span class="comment"># 判断文件夹是否存在</span></div><div class="line">		folderExists = os.path.exists(folderPath)</div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> folderExists:</div><div class="line">			os.mkdir(folderPath)</div><div class="line"></div><div class="line">		print(<span class="string">'课程名:'</span> + courseName + <span class="string">' 课程数量:'</span> + str(courseCount))</div><div class="line">		<span class="comment"># 课程的编号,构建课程的页面地址</span></div><div class="line">		i = <span class="number">0</span></div><div class="line">		<span class="keyword">while</span> i &lt; courseCount:</div><div class="line">			i += <span class="number">1</span></div><div class="line">			pageUrl = courseUrl.split(<span class="string">'.html'</span>)[<span class="number">0</span>] + <span class="string">'_'</span> + str(i) + <span class="string">'.html?ss=1'</span></div><div class="line">			<span class="comment"># 本节课程的html代码</span></div><div class="line">			request = urllib.request.urlopen(pageUrl)</div><div class="line">			pageHtml = request.read()</div><div class="line">			request.close()</div><div class="line">			<span class="comment"># 本节课程的名称</span></div><div class="line">			name = re.search(<span class="string">r'(?s)&lt;title&gt;(.*?)-'</span>,pageHtml).group(<span class="number">1</span>)</div><div class="line">			<span class="comment"># 本节课程的视频地址</span></div><div class="line">			videoUrl = re.search(<span class="string">r'&lt;source src="(.*?)"'</span>,pageHtml)</div><div class="line">			<span class="comment"># 有的页面写的课时比实际课时多,会匹配不到视频地址</span></div><div class="line">			<span class="keyword">if</span> videoUrl == <span class="keyword">None</span>:</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				videoUrl = videoUrl.group(<span class="number">1</span>)</div><div class="line">			print(<span class="string">'正在下载'</span> + name + <span class="string">'...'</span>)</div><div class="line">			<span class="comment"># 存储视频的Path: 总路径/课程名/每一节的名称</span></div><div class="line">			urllib.urlretrieve(videoUrl,folderPath + str(i) + name + <span class="string">'.mp4'</span>,self.cbk)</div><div class="line">		print(<span class="string">'下载完成'</span>)</div><div class="line"></div><div class="line">	<span class="comment"># 从网上下载的可以显示下载进度的函数</span></div><div class="line">	<span class="comment"># \b是我加的,产生了很奇特的显示效果,还行</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">cbk</span><span class="params">(self,a, b, c)</span>:</span></div><div class="line">        per = <span class="number">100.0</span>*a*b/c</div><div class="line">        <span class="keyword">if</span> per &gt; <span class="number">100</span>:</div><div class="line">            per = <span class="number">100</span></div><div class="line">        print(<span class="string">'%.2f%%\b\b\b\b\b\b'</span> % per)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cbk</span><span class="params">(self,a,b,c)</span>:</span></div><div class="line">        per = <span class="number">100.0</span> * a * b /c</div><div class="line">        <span class="keyword">if</span> per &gt;<span class="number">100</span>:</div><div class="line">            per = <span class="number">100</span></div><div class="line">        print(<span class="string">'%.2f%%\b\b\b\b\b\b'</span> % per)</div><div class="line"></div><div class="line"><span class="comment"># 建立下载对象,参数是即将下载的这些视频放的目录,程序会根据课程名在这个文件夹里面再建文件夹</span></div><div class="line">down = DownCourse(<span class="string">'/home/geekgao/视频/SpringMVC/'</span>)</div><div class="line">down.login()</div><div class="line"></div><div class="line"><span class="comment"># 下载一个页面中的所有课程</span></div><div class="line">request = urllib.request.urlopen(<span class="string">'http://www.jikexueyuan.com/course/springmvc/'</span>)</div><div class="line">html = request.read()</div><div class="line">request.close()</div><div class="line">courseUrls = re.findall(<span class="string">r'class="lesson-info-h2"&gt;&lt;a href="(.*?)"'</span>,html)</div><div class="line"></div><div class="line"><span class="keyword">for</span> courseUrl <span class="keyword">in</span> courseUrls:</div><div class="line">    down.download(courseUrl)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫实战：极客学院]]></title>
      <url>https://patrickphang.github.io/2017/01/03/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%EF%BC%9A%E6%9E%81%E5%AE%A2%E5%AD%A6%E9%99%A2/</url>
      <content type="html"><![CDATA[<a id="more"></a> 
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#_*_coding:utf-8_*_  </span></div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  </div><div class="line"><span class="keyword">import</span> requests  </div><div class="line"><span class="keyword">import</span> sys  </div><div class="line">reload(sys)  </div><div class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>)  </div><div class="line">  </div><div class="line"><span class="comment">#把课程信息保存到info.txt中  </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveinfo</span><span class="params">(classinfo)</span>:</span>  </div><div class="line">    f = open(<span class="string">'info.txt'</span>,<span class="string">'a'</span>)  </div><div class="line">    f.writelines(<span class="string">'title:'</span>+ classinfo[<span class="string">'title'</span>]+<span class="string">'\n'</span>)  </div><div class="line">    f.writelines(<span class="string">'content:'</span> + classinfo[<span class="string">'content'</span>] + <span class="string">'\n'</span>)  </div><div class="line">    f.writelines(<span class="string">'classtime:'</span> + classinfo[<span class="string">'classtime'</span>] + <span class="string">'\n'</span>)  </div><div class="line">    f.writelines(<span class="string">'classlevel:'</span> + classinfo[<span class="string">'classlevel'</span>] + <span class="string">'\n'</span>)  </div><div class="line">    f.writelines(<span class="string">'learnnum:'</span> +classinfo[<span class="string">'learnnum'</span>] +<span class="string">'\n\n'</span>)  </div><div class="line">    f.close()  </div><div class="line"><span class="comment">#爬虫主体  </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(url)</span>:</span>  </div><div class="line">    html = requests.get(url)    <span class="comment">#用Requests下载网页</span></div><div class="line">    selector = etree.HTML(html.text)    <span class="comment">#以下用Xpath来解析网页</span></div><div class="line">    content_field = selector.xpath(<span class="string">'//div[@class="lesson-list"]/ul/li'</span>)  </div><div class="line">    info = []  </div><div class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> content_field:  </div><div class="line">        classinfo = &#123;&#125;  </div><div class="line">        classinfo[<span class="string">'title'</span>] = each.xpath(<span class="string">'div[@class="lesson-infor"]/h2[@class="lesson-info-h2"]/a/text()'</span>)[<span class="number">0</span>]  </div><div class="line">        classinfo[<span class="string">'content'</span>] = (each.xpath(<span class="string">'div[@class="lesson-infor"]/p/text()'</span>)[<span class="number">0</span>]).strip()  </div><div class="line">        classTime = (each.xpath(<span class="string">'div[@class="lesson-infor"]/div/div/dl/dd[@class="mar-b8"]/em/text()'</span>)[<span class="number">0</span>]).split()  </div><div class="line">        classinfo[<span class="string">'classtime'</span>] = <span class="string">''</span>.join(classTime)  </div><div class="line">        classinfo[<span class="string">'classlevel'</span>] = each.xpath(<span class="string">'div[@class="lesson-infor"]/div/div/dl/dd[@class="zhongji"]/em/text()'</span>)[<span class="number">0</span>]  </div><div class="line">        classinfo[<span class="string">'learnnum'</span>] = each.xpath(<span class="string">'div[@class="lesson-infor"]/div[@class="timeandicon"]/div/em/text()'</span>)[<span class="number">0</span>]  </div><div class="line">        info.append(classinfo)  </div><div class="line">    <span class="keyword">return</span> info  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    <span class="keyword">print</span> <span class="string">u'开始爬取内容。。。'</span>  </div><div class="line">    page = []  </div><div class="line">    <span class="comment">#循环用来生产不同页数的链接  </span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):  </div><div class="line">        newpage = <span class="string">'http://www.jikexueyuan.com/course/?pageNum='</span> + str(i)  </div><div class="line">        <span class="keyword">print</span> <span class="string">u"第%d页"</span>%i  </div><div class="line">        <span class="keyword">print</span> <span class="string">u'正在处理页面：'</span>+ newpage  </div><div class="line">        page.append(newpage)  </div><div class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> page:  </div><div class="line">        info = spider(each)  </div><div class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> info:  </div><div class="line">            saveinfo(each)</div></pre></td></tr></table></figure>
<p>#转自<br><a href="http://blog.csdn.net/flyingfishmark/article/details/51274560" target="_blank" rel="external">Python爬虫实战：极客学院</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python利用百度天气api查询天气数据]]></title>
      <url>https://patrickphang.github.io/2017/01/03/python%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E5%A4%A9%E6%B0%94api%E6%9F%A5%E8%AF%A2%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="一-说明"><a href="#一-说明" class="headerlink" title="一.说明"></a>一.说明</h2><p>本次实验的是百度天气的api,网址为：<a href="http://api.map.baidu.com/telematics/v3/weather?location=%E5%B9%BF%E5%B7%9E&amp;output=json&amp;ak=KPGX6sBfBZvz8NlDN5mXDNBF&amp;callback=" target="_blank" rel="external">click here</a><br>查询广州的天气，返回json格式，然后解析内容（上面链接点开就知道了）。(可以使用chrome应用Postman来pretiffy json内容)<br><a id="more"></a> </p>
<h2 id="二-示例代码"><a href="#二-示例代码" class="headerlink" title="二.示例代码"></a>二.示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> http.client</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment">#1.requests内置json解析方法</span></div><div class="line">url = <span class="string">'http://api.map.baidu.com/telematics/v3/weather?location=%E5%B9%BF%E5%B7%9E&amp;output=json&amp;ak=KPGX6sBfBZvz8NlDN5mXDNBF&amp;callback='</span></div><div class="line">r = requests.get(url)</div><div class="line"></div><div class="line">print(<span class="string">"查询日期："</span>+r.json[<span class="string">'date'</span>])</div><div class="line">print(<span class="string">"城市："</span>+r.json[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'currentCity'</span>])</div><div class="line">print(<span class="string">"pm2.5值："</span>+r.json[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'pm25'</span>])</div><div class="line">print(<span class="string">"\n"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</div><div class="line">    print(<span class="string">"日期："</span>+r.json[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'date'</span>])</div><div class="line">    print(<span class="string">"天气："</span>+r.json[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'weather'</span>])</div><div class="line">    print(<span class="string">"风力："</span>+r.json[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'wind'</span>])</div><div class="line">    print(<span class="string">"温度："</span>+r.json[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'temperature'</span>])</div><div class="line">    print(<span class="string">"---------------"</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#2.urllib库 + json库的json.loads()</span></div><div class="line">url = <span class="string">'http://api.map.baidu.com/telematics/v3/weather?location=%E5%B9%BF%E5%B7%9E&amp;output=json&amp;ak=KPGX6sBfBZvz8NlDN5mXDNBF&amp;callback='</span></div><div class="line">request = urllib.request.urlopen(url).read().decode(<span class="string">'utf8'</span>))  <span class="comment">#注意必须要.decode('utf8')，不然会有错误：the JSON object must be str, not 'bytes'</span></div><div class="line">s = json.loads(request)</div><div class="line"></div><div class="line">print(<span class="string">"查询日期："</span>+s[<span class="string">'date'</span>])</div><div class="line">print(<span class="string">"城市："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'currentCity'</span>])</div><div class="line">print(<span class="string">"pm2.5值："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'pm25'</span>])</div><div class="line">print(<span class="string">"\n"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</div><div class="line">    print(<span class="string">"日期："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'date'</span>])</div><div class="line">    print(<span class="string">"天气："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'weather'</span>])</div><div class="line">    print(<span class="string">"风力："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'wind'</span>])</div><div class="line">    print(<span class="string">"温度："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'temperature'</span>])</div><div class="line">    print(<span class="string">"---------------"</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#3.http.Client库 + json库的json.loads()</span></div><div class="line">url = <span class="string">'http://api.map.baidu.com/telematics/v3/weather?location=%E5%B9%BF%E5%B7%9E&amp;output=json&amp;ak=KPGX6sBfBZvz8NlDN5mXDNBF&amp;callback='</span></div><div class="line">httpClient = http.client.HTTPConnection(<span class="string">'api.map.baidu.com'</span>, <span class="number">80</span>, timeout=<span class="number">30</span>)</div><div class="line">httpClient.request(<span class="string">'GET'</span>,</div><div class="line">                   <span class="string">'/telematics/v3/weather?location=%E5%B9%BF%E5%B7%9E&amp;output=json&amp;ak=KPGX6sBfBZvz8NlDN5mXDNBF&amp;callback='</span>)</div><div class="line"></div><div class="line">response = httpClient.getresponse()</div><div class="line">s = json.loads(response.read().decode(<span class="string">'utf8'</span>))  <span class="comment">#注意必须要.decode('utf8')，不然会有错误：the JSON object must be str, not 'bytes'</span></div><div class="line"></div><div class="line"></div><div class="line">print(<span class="string">"查询日期："</span>+s[<span class="string">'date'</span>])</div><div class="line">print(<span class="string">"城市："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'currentCity'</span>])</div><div class="line">print(<span class="string">"pm2.5值："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'pm25'</span>])</div><div class="line">print(<span class="string">"\n"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</div><div class="line">    print(<span class="string">"日期："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'date'</span>])</div><div class="line">    print(<span class="string">"天气："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'weather'</span>])</div><div class="line">    print(<span class="string">"风力："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'wind'</span>])</div><div class="line">    print(<span class="string">"温度："</span>+s[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>][i][<span class="string">'temperature'</span>])</div><div class="line">    print(<span class="string">"---------------"</span>)</div></pre></td></tr></table></figure>
<h2 id="三-自己定义json解析函数"><a href="#三-自己定义json解析函数" class="headerlink" title="三.自己定义json解析函数"></a>三.自己定义json解析函数</h2><p>待解析json片段：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"showapi_res_code"</span>: <span class="number">0</span>,</div><div class="line">	<span class="string">"showapi_res_error"</span>: <span class="string">""</span>,</div><div class="line">	<span class="string">"showapi_res_body"</span>: &#123;</div><div class="line">		<span class="string">"pagebean"</span>: &#123;</div><div class="line">			<span class="string">"allNum"</span>: <span class="number">5034</span>,</div><div class="line">			<span class="string">"allPages"</span>: <span class="number">252</span>,</div><div class="line">			<span class="string">"contentlist"</span>: [</div><div class="line">				&#123;</div><div class="line">					<span class="string">"code2img"</span>: <span class="string">"http://app1.showapi.com/weixin_info/pubNum/xxxxxx.jpg"</span>,</div><div class="line">					<span class="string">"id"</span>: <span class="string">"55cbfce16e36a9c5946e40b0"</span>,</div><div class="line">					<span class="string">"pubNum"</span>: <span class="string">"xxxx"</span>,</div><div class="line">					<span class="string">"tag"</span>: <span class="string">""</span>,</div><div class="line">					<span class="string">"type1_id"</span>: <span class="string">"44"</span>,</div><div class="line">					<span class="string">"type1_name"</span>: <span class="string">"名人明星"</span>,</div><div class="line">					<span class="string">"type2_id"</span>: <span class="string">"73"</span>,</div><div class="line">					<span class="string">"type2_name"</span>: <span class="string">"时尚"</span>,</div><div class="line">					<span class="string">"userLogo"</span>: <span class="string">"http://app1.showapi.com/weixin_info/pubNum/xxxx.jpg"</span>,</div><div class="line">					<span class="string">"weiNum"</span>: <span class="string">"xxx66 "</span></div><div class="line">				&#125;,</div><div class="line">				&#123;</div><div class="line">					<span class="string">"code2img"</span>: <span class="string">"http://app1.showapi.com/weixin_info/pubNum/xxxx.jpg"</span>,</div><div class="line">					<span class="string">"id"</span>: <span class="string">"55cbfcdf6e36a9c5946e40ae"</span>,</div><div class="line">					<span class="string">"pubNum"</span>: <span class="string">"阳西县蓝星半岛旅游度假村"</span>,</div><div class="line">					<span class="string">"tag"</span>: <span class="string">"添加微信号:xxxx22 "</span>,</div><div class="line">					<span class="string">"type1_id"</span>: <span class="string">"47"</span>,</div><div class="line">					<span class="string">"type1_name"</span>: <span class="string">"生活购物"</span>,</div><div class="line">					<span class="string">"type2_id"</span>: <span class="string">"100"</span>,</div><div class="line">					<span class="string">"type2_name"</span>: <span class="string">"旅游"</span>,</div><div class="line">					<span class="string">"userLogo"</span>: <span class="string">"http://app1.showapi.com/weixin_info/pubNum/xxxx.jpg"</span>,</div><div class="line">					<span class="string">"weiNum"</span>: <span class="string">"xxxx22"</span></div><div class="line">				&#125;</div></pre></td></tr></table></figure></p>
<p>函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_path</span><span class="params">(d, path, sep=<span class="string">'.'</span>)</span>:</span></div><div class="line">    pp = path.split(sep)</div><div class="line">    t = d</div><div class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pp:</div><div class="line">        <span class="keyword">if</span> type(t) <span class="keyword">is</span> dict:</div><div class="line">            t = t[p]</div><div class="line">        <span class="keyword">elif</span> type(t) <span class="keyword">is</span> list:</div><div class="line">            t = t[int(p)]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            t = <span class="keyword">None</span></div><div class="line">    <span class="keyword">return</span> t</div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line">d = json.loads(s)</div><div class="line"><span class="keyword">print</span> json_path(d, <span class="string">"showapi_res_body.pagebean.contentlist.1.pubNum"</span>) <span class="comment">#阳西县蓝星半岛旅游度假村</span></div><div class="line"><span class="keyword">print</span> json_path(d, <span class="string">"showapi_res_code"</span>) <span class="comment"># 0</span></div></pre></td></tr></table></figure></p>
<h2 id="四-参考资料"><a href="#四-参考资料" class="headerlink" title="四.参考资料"></a>四.参考资料</h2><ol>
<li><a href="https://www.zhihu.com/question/36960036?from=profile_question_card" target="_blank" rel="external">知乎-为什么我已经知道了python的基本语法，可还是不会写个类似天气预报或者能聊天的小软件？</a></li>
<li><a href="http://www.jb51.net/article/78282.htm" target="_blank" rel="external">python结合API实现即时天气信息</a></li>
<li><a href="https://www.zhihu.com/question/35446994" target="_blank" rel="external">python 调用 API 获得的JSON如何处理才能获得我想获得的内容呢?</a></li>
<li><a href="https://www.zhihu.com/question/20575288" target="_blank" rel="external">网上的天气 API 哪一个更加可靠？</a></li>
<li><a href="http://www.jianshu.com/p/0ca5b64cd104" target="_blank" rel="external">python day 08获取天气信息.制作天气预报软件</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pyquery库的使用]]></title>
      <url>https://patrickphang.github.io/2017/01/03/pyquery%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><code>#coding=utf-8</code> #防止报错：UnicodeEncodeError: ‘gbk’ codec can’t encode character<br><code>from pyquery import PyQuery as pq</code><br><code>from lxml import etree</code><br><a id="more"></a> </p>
<h4 id="可加载一段HTML字符串，或一个HTML文件，或是一个url地址，或lxml-etree："><a href="#可加载一段HTML字符串，或一个HTML文件，或是一个url地址，或lxml-etree：" class="headerlink" title="可加载一段HTML字符串，或一个HTML文件，或是一个url地址，或lxml.etree："></a>可加载一段HTML字符串，或一个HTML文件，或是一个url地址，或lxml.etree：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">htmlblock = <span class="string">"&lt;html&gt;&lt;title&gt;hello&lt;/title&gt;&lt;/html&gt;"</span></div><div class="line">filename = <span class="string">"path_to_html_file"</span></div><div class="line">url = <span class="string">"http://www.baidu.com"</span></div><div class="line"></div><div class="line">d = pq(htmlblock)</div><div class="line">d = pq(filename)</div><div class="line">d = pq(url)</div><div class="line">d = pq(etree.fromstring(<span class="string">"&lt;html&gt;&lt;/html&gt;"</span>))</div></pre></td></tr></table></figure>
<p>直接输出截取串的html对象，看着更加直观  </p>
<pre><code>v_source = pq(url=&apos;http://yunvs.com/list/mai_1.html&apos;)
for data in v_source(&apos;tr&apos;):
    print(pq(data).html())
    print(pq(data).text()) #以text文本的方式输出，这样就去掉了html标记
</code></pre><h4 id="pq-d-‘a-class-“”-’-attr-‘’"><a href="#pq-d-‘a-class-“”-’-attr-‘’" class="headerlink" title="pq(d)(‘a[class= “”]’).attr(‘’)"></a>pq(d)(‘a[class= “”]’).attr(‘’)</h4><p><code>Aurl= pq(data)(&#39;a[class= &quot;j_th_tit &quot; ]&#39;).attr(&#39;href&#39;)</code></p>
<hr>
<hr>
<hr>
<h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1.html()和text() ——获取相应的HTML块或文本块</span></div><div class="line">d = pq(<span class="string">"&lt;head&gt;&lt;title&gt;hello&lt;/title&gt;&lt;/head&gt;"</span>)</div><div class="line">d(<span class="string">'head'</span>).html()    <span class="comment">#返回&lt;title&gt;hello&lt;/title&gt;</span></div><div class="line">d(<span class="string">'head'</span>).text()    <span class="comment">#返回hello</span></div><div class="line"></div><div class="line"><span class="comment">#2.根据HTML标签获取元素。注意：当获取到的元素不只一个时，html()、text()方法只返回首个元素的相应内容块</span></div><div class="line">d = pq(<span class="string">'&lt;div&gt;&lt;p&gt;test 1&lt;/p&gt;&lt;p&gt;test 2&lt;/p&gt;&lt;/div&gt;'</span>)</div><div class="line">print(d(<span class="string">'p'</span>))           <span class="comment">#返回&lt;p&gt;test 1&lt;/p&gt;&lt;p&gt;test 2&lt;/p&gt;</span></div><div class="line">print(d(<span class="string">'p'</span>).html())    <span class="comment">#返回test 1</span></div><div class="line"></div><div class="line"><span class="comment">#3.eq(index) ——根据给定的索引号得到指定元素。接上例，若想得到第二个p标签内的内容，则可以：</span></div><div class="line">print(d(<span class="string">'p'</span>).eq(<span class="number">1</span>).html()) <span class="comment">#返回test 2</span></div><div class="line"></div><div class="line"><span class="comment">#4.filter() ——根据类名、id名得到指定元素，例：</span></div><div class="line">d = pq(<span class="string">"&lt;div&gt;&lt;p id='1'&gt;test 1&lt;/p&gt;&lt;p class='2'&gt;test 2&lt;/p&gt;&lt;/div&gt;"</span>)</div><div class="line">d(<span class="string">'p'</span>).filter(<span class="string">'#1'</span>) <span class="comment">#返回[&lt;p#1&gt;]</span></div><div class="line">d(<span class="string">'p'</span>).filter(<span class="string">'.2'</span>) <span class="comment">#返回[&lt;p.2&gt;]</span></div><div class="line"></div><div class="line"><span class="comment">#5.find() ——查找嵌套元素，例：</span></div><div class="line">d = pq(<span class="string">"&lt;div&gt;&lt;p id='1'&gt;test 1&lt;/p&gt;&lt;p class='2'&gt;test 2&lt;/p&gt;&lt;/div&gt;"</span>)</div><div class="line">d(<span class="string">'div'</span>).find(<span class="string">'p'</span>)<span class="comment">#返回[&lt;p#1&gt;, &lt;p.2&gt;]</span></div><div class="line">d(<span class="string">'div'</span>).find(<span class="string">'p'</span>).eq(<span class="number">0</span>)<span class="comment">#返回[&lt;p#1&gt;]</span></div><div class="line"></div><div class="line"><span class="comment">#6.直接根据类名、id名获取元素，例：</span></div><div class="line">d = pq(<span class="string">"&lt;div&gt;&lt;p id='1'&gt;test 1&lt;/p&gt;&lt;p class='2'&gt;test 2&lt;/p&gt;&lt;/div&gt;"</span>)</div><div class="line">d(<span class="string">'#1'</span>).html()<span class="comment">#返回test 1</span></div><div class="line">d(<span class="string">'.2'</span>).html()<span class="comment">#返回test 2</span></div><div class="line"></div><div class="line"><span class="comment">#7.获取属性值，例：</span></div><div class="line">d = pq(<span class="string">"&lt;p id='my_id'&gt;&lt;a href='http://hello.com'&gt;hello&lt;/a&gt;&lt;/p&gt;"</span>)</div><div class="line">d(<span class="string">'a'</span>).attr(<span class="string">'href'</span>)<span class="comment">#返回http://hello.com</span></div><div class="line">d(<span class="string">'p'</span>).attr(<span class="string">'id'</span>)<span class="comment">#返回my_id</span></div><div class="line"></div><div class="line"><span class="comment">#8.修改属性值，例：</span></div><div class="line">d(<span class="string">'a'</span>).attr(<span class="string">'href'</span>, <span class="string">'http://baidu.com'</span>)把href属性修改为了baidu</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#9.addClass(value) ——为元素添加类，例：</span></div><div class="line">d = pq(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>)</div><div class="line">d.addClass(<span class="string">'my_class'</span>)<span class="comment">#返回[&lt;div.my_class&gt;]</span></div><div class="line"></div><div class="line"><span class="comment">#10.hasClass(name) #返回判断元素是否包含给定的类，例：</span></div><div class="line">d = pq(<span class="string">"&lt;div class='my_class'&gt;&lt;/div&gt;"</span>)</div><div class="line">d.hasClass(<span class="string">'my_class'</span>)<span class="comment">#返回True</span></div><div class="line"></div><div class="line"><span class="comment">#11.children(selector=None) ——获取子元素，例：</span></div><div class="line">d = pq(<span class="string">"&lt;span&gt;&lt;p id='1'&gt;hello&lt;/p&gt;&lt;p id='2'&gt;world&lt;/p&gt;&lt;/span&gt;"</span>)</div><div class="line">d.children()<span class="comment">#返回[&lt;p#1&gt;, &lt;p#2&gt;]</span></div><div class="line">d.children(<span class="string">'#2'</span>)<span class="comment">#返回[&lt;p#2&gt;]</span></div><div class="line"></div><div class="line"><span class="comment">#12.parents(selector=None)——获取父元素，例：</span></div><div class="line">d = pq(<span class="string">"&lt;span&gt;&lt;p id='1'&gt;hello&lt;/p&gt;&lt;p id='2'&gt;world&lt;/p&gt;&lt;/span&gt;"</span>)</div><div class="line">d(<span class="string">'p'</span>).parents()            <span class="comment">#返回[&lt;span&gt;]</span></div><div class="line">d(<span class="string">'#1'</span>).parents(<span class="string">'span'</span>)     <span class="comment">#返回[&lt;span&gt;]</span></div><div class="line">d(<span class="string">'#1'</span>).parents(<span class="string">'p'</span>)        <span class="comment">#返回[]</span></div><div class="line"></div><div class="line"><span class="comment">#13.clone() ——返回一个节点的拷贝</span></div><div class="line"></div><div class="line"><span class="comment">#14.empty() ——移除节点内容</span></div><div class="line"></div><div class="line"><span class="comment">#15.nextAll(selector=None) ——返回后面全部的元素块，例：</span></div><div class="line">d = pq(<span class="string">"&lt;p id='1'&gt;hello&lt;/p&gt;&lt;p id='2'&gt;world&lt;/p&gt;&lt;img scr='' /&gt;"</span>)</div><div class="line">d(<span class="string">'p:first'</span>).nextAll()<span class="comment">#返回[&lt;p#2&gt;, &lt;img&gt;]</span></div><div class="line">d(<span class="string">'p:last'</span>).nextAll()<span class="comment">#返回[&lt;img&gt;]</span></div><div class="line"></div><div class="line"><span class="comment">#16.not_(selector) ——返回不匹配选择器的元素，例：</span></div><div class="line">d = pq(<span class="string">"&lt;p id='1'&gt;test 1&lt;/p&gt;&lt;p id='2'&gt;test 2&lt;/p&gt;"</span>)</div><div class="line">d(<span class="string">'p'</span>).not_(<span class="string">'#2'</span>)<span class="comment">#返回[&lt;p#1&gt;]</span></div></pre></td></tr></table></figure>
<h3 id="与requests库结合使用："><a href="#与requests库结合使用：" class="headerlink" title="与requests库结合使用："></a>与requests库结合使用：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</div><div class="line"></div><div class="line">r = requests.get(<span class="string">'http://www.meipai.com/media/596371059'</span>)</div><div class="line">d = pq(r.content)</div><div class="line">print(d(<span class="string">'meta[property="og:video:url"]'</span>).attr(<span class="string">'content'</span>))</div></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://pythonhosted.org//pyquery/api.html" target="_blank" rel="external">PyQuery 1.2.4 complete API</a><br><a href="http://www.geoinformatics.cn/lab/pyquery/" target="_blank" rel="external">pyquery: 基于python和jquery语法操作XML</a><br><a href="http://www.jianshu.com/p/036e589119d8" target="_blank" rel="external">这一年Python总结</a><br><a href="http://cuiqingcai.com/2636.html" target="_blank" rel="external">Python爬虫利器六之PyQuery的用法</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BeautifulSoup库的使用]]></title>
      <url>https://patrickphang.github.io/2017/01/03/BeautifulSoup%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="导入所需包"><a href="#导入所需包" class="headerlink" title="导入所需包"></a>导入所需包</h2><p><code>from bs4 import BeautifulSoup</code><br><code>soup = BeautifulSoup(html)</code></p>
<h2 id="解析顺序"><a href="#解析顺序" class="headerlink" title="解析顺序"></a>解析顺序</h2><p>‘lxml’-&gt;’html5lib’-&gt;’html.parser’<br><a id="more"></a> </p>
<h2 id="对象种类"><a href="#对象种类" class="headerlink" title="对象种类"></a>对象种类</h2><p>有四种类型：Tag，NavigableString，BeautifulSoup，Comment。<br>BeautifulSoup将文档转化为树形结构，每个节点都是上述四种类型的Python对象。</p>
<h2 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h2><p>BeautifulSoup对象作为一棵树，有多个节点。对于一个节点，相对于它所在的位置，有子节点、父节点、兄弟节点。</p>
<h4 id="1-子节点"><a href="#1-子节点" class="headerlink" title="1. 子节点"></a>1. 子节点</h4><pre><code>* 一个Tag可包含多个Tag以及字符串，这些都是这个Tag的子节点。而NavigableString不会有子节点。
* 如果想要获得某个Tag：`soup.tag_name`  
* 通过点取属性，只能获得当前名字的第一个tag，若要获取所有，需要使用搜索文档树中的方法:`soup.find_all(&apos;tag_name&apos;)`  
* tag的.contents属性可将所有子节点以列表的方式输出。可通过tag的.children生成器，对所有子节点遍历。  
* `.contents`和`.children`只对获取Tag的直接子节点，`.descendants`可对Tag的所有子孙节点遍历。  
* 如果tag只有一个NavigableString类型子节点，则可用`.string`获取。如果包含多个，使用`.strings`遍历。若输出的字符串中包含空格或空行，使用`.stripped_strings`去除。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">res = soup.stripped_strings</div><div class="line">print(list(res))</div></pre></td></tr></table></figure>
</code></pre><h4 id="2-父节点"><a href="#2-父节点" class="headerlink" title="2. 父节点"></a>2. 父节点</h4><p><code>.parent</code> -&gt; 当前节点的父节点<br><code>.parents</code> -&gt; 当前节点的所有父辈节点  </p>
<h4 id="3-兄弟节点"><a href="#3-兄弟节点" class="headerlink" title="3. 兄弟节点"></a>3. 兄弟节点</h4><p>拥有同一父节点的节点之间：<br><code>.next_sibling</code><br><code>.previous_sibling</code>  </p>
<pre><code>所有兄弟节点：  
`.next_siblings`  
`.previous_siblings`  

指向下一个或上一个解析对象：  
`.next_element`  
`.previous_element`  
`.next_elements`  
`.previous_elements`  
</code></pre><hr>
<hr>
<hr>
<h3 id="搜索文档树：find-str-和find-all-str"><a href="#搜索文档树：find-str-和find-all-str" class="headerlink" title="搜索文档树：find(str)和find_all(str)"></a>搜索文档树：find(str)和find_all(str)</h3><blockquote>
<p>其中的str，代表了tag的name。可以是纯字符串、正则表达式、列表（任一匹配就满足条件，是或运算）、True（返回所有Tag节点不返回字符串节点）。<br>另一种入参不是str，而是method。此方法是一个函数，只接受一个元素入参，若此函数返回True表示入参匹配要求。例如：<br>def has_class_but_no_id(tag):<br>return tag.has_attr(‘class’) and not tag.has_attr(‘id’)<br>综上，过滤器包括：纯字符串、正则表达式、列表、True、方法这几种。</p>
</blockquote>
<h4 id="1-find-all-name-attrs-recursive-text-kwargs"><a href="#1-find-all-name-attrs-recursive-text-kwargs" class="headerlink" title="1. find_all(name,attrs,recursive,text,**kwargs)"></a>1. <code>find_all(name,attrs,recursive,text,**kwargs)</code></h4><p>该方法搜索当前节点的所有tag子节点。  </p>
<ol>
<li><code>name</code>参数：<br>指的是tag的name属性，字符串对象自动忽略。<br>过滤器可以使用全部种类。  </li>
<li><code>keyword</code>参数：<br>如果一个入参指定了名字，但是并不是上述提到的入参名字，搜索时会把该入参当做是tag的属性来搜索。<br>例如：<code>soup.find_all(id=&#39;link2&#39;)</code>会返回tag中存在属性id，并且id对应的值是link2的tag。<br>以上方法可使用除方法之外的所有过滤器。<br>某些特殊属性不能这样直接使用，则使用如下方法：<br><code>soup.find_all(attrs={&quot;key&quot;:&quot;value&quot;})</code><br>例如要使用class属性进行搜索，由于class是python中的保留字，不能直接写成入参，目前有两种方法：<br>soup.find<em>all(‘tag.name’,class</em>=’class_value’)<br>soup.find_all(‘tag.name’,attrs={‘class’:’class<em>value’})<br>class</em>方法可以使用全部过滤器。<br>另外，因为class是一个多值属性，所以只需要匹配一个值，就可以得到结果，所谓的不完全匹配。<br>使用完全匹配时，过滤器中的字符顺序需要和实际相符合才能得到对应结果。  </li>
<li><code>text</code>参数：<br>搜索的是Tag中的字符串内容，可使用全部过滤器。</li>
<li><code>limit</code>参数：<br>限制返回数量。  </li>
<li><code>recursive</code>参数：<br>find_all()默认是搜索当前节点的所有子孙节点，若只需要搜索直接的子节点，则设置recursive=False。  </li>
</ol>
<p>find_all()是实际当中用的最广泛的。因此有了等价的简化版：<br><code>soup.find_all(&#39;a&#39;)</code>或<code>soup(&#39;a&#39;)</code></p>
<h4 id="2-find-name-attrs-recursive-text-kwargs"><a href="#2-find-name-attrs-recursive-text-kwargs" class="headerlink" title="2. find(name,attrs,recursive,text,**kwargs)"></a>2. <code>find(name,attrs,recursive,text,**kwargs)</code></h4><p>find()方法等价于find_all(limit=1)，返回符合条件的第一个对象。<br>区别在于，前者直接返回结果，后者返回只有一个元素的列表。若没有对象符合条件，前者返回None，后者返回空列表。<br>简化版：<code>soup.find(&#39;head&#39;).find(&#39;title&#39;)</code>或<code>soup.head.title</code></p>
<pre><code>除了find()和find_all()之外还有一些搜索的方法：
find_parent()
find_next_sibling()
find_previous_sibling()
上面三种可以在后面加&apos;s&apos;表示所有。
find_next()
find_previous()
find_all_next()
find_all_previous()
</code></pre><h4 id="3-CSS选择器-select-方法"><a href="#3-CSS选择器-select-方法" class="headerlink" title="3. CSS选择器(.select()方法)"></a>3. CSS选择器(.select()方法)</h4><p>Tag或BeautifulSoup对象的.select()方法。<br><code>res = soup.select(&#39;#wrapperto&#39;)</code> -&gt; tag’s id<br><code>res = soup.select(&#39;img[src]&#39;)</code> -&gt; ‘img’ tags有’src’ attributes<br><code>res = soup.select(&#39;img[src=...]&#39;)</code> -&gt; ‘src’ attributes是…  </p>
<hr>
<hr>
<hr>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ul>
<li><code>soup.prettify()</code>将文档树格式化之后输出。    </li>
<li>若不注重格式，则可使用python的<code>str()</code>或<code>unicode()</code>。    </li>
<li>如果想得到tag中包含的文本内容，使用<code>get_text()</code>，可获取到当前节点的文本，以及子孙节点中的文本。返回的是Unicode。  </li>
<li>可以指定参数设置分隔符如<code>get_text(&quot;|&quot;)</code>是以“|”作为分隔符。  </li>
<li><code>get_text(strip=True)</code>可去除文本前后的空白。  </li>
<li>或者用<code>.stripped_strings</code>进行遍历。获得父级标签下的所有子标签内的文本信息，相当于处理多个文本的高级的get_text()方法  </li>
</ul>
<hr>
<hr>
<hr>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>1.soup使用Unicode编码。<br>2.BeautifulSoup对象的.original_encoding属性来获取自动识别编码的结果。<br>3.在创建BeautifulSoup对象时，指定入参<code>from_encoding</code>来告知文档的编码方式。<br>4.有时转码时有些特殊字符替换成了特殊的Unicode，可通过BeautifulSoup对象的<code>.contains_repalcement_characters</code>属性来判断是否有此情况，为True即为有特殊替换。<br>5.输出编码统一为UTF8，若想要其他的编码，则和一般的python字符串相同，需要进行手动设置。</p>
<hr>
<hr>
<hr>
<p>完整实例代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests,urllib.request</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">source_code = requests.get(url,headers=header)</div><div class="line">wb_data = source_code.text</div><div class="line"></div><div class="line">soup = BeautifulSoup(wb_data,<span class="string">'lxml'</span>)</div><div class="line">titles = soup.select(<span class="string">'body &gt; div.main-content &gt; ul &gt; li &gt; div.article-info &gt; h3 &gt; a'</span>)</div><div class="line">images = soup.select(<span class="string">'body &gt; div.main-content &gt; ul &gt; li &gt; img'</span>)</div><div class="line"></div><div class="line"><span class="comment">#获取网页信息</span></div><div class="line"><span class="keyword">for</span> title,image <span class="keyword">in</span> zip(titles,images):</div><div class="line">    data = &#123;</div><div class="line">        <span class="string">'title'</span>:title.get_text(),</div><div class="line">        <span class="string">'image'</span>:image.get(<span class="string">'src'</span>)</div><div class="line">    &#125;</div><div class="line">print(data)</div><div class="line"></div><div class="line"><span class="comment">#下载</span></div><div class="line">download_links = []</div><div class="line">folder_path = <span class="string">"C:/Users/asus-pc/Desktop"</span></div><div class="line"><span class="keyword">for</span> pic_tag <span class="keyword">in</span> soup.find_all(<span class="string">'img'</span>):</div><div class="line">    pic_link = pic_tag.get(<span class="string">'src'</span>)</div><div class="line">    download_links.append(pic_link)</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> download_links:</div><div class="line">    urllib.request.urlretrieve(item,folder_path+item[<span class="number">-5</span>:])</div><div class="line">    print(<span class="string">"done!"</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[requests库的使用]]></title>
      <url>https://patrickphang.github.io/2017/01/03/requests%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><code>import requests</code> -&gt; 引用模块  </p>
<h2 id="1-发送请求与传递参数"><a href="#1-发送请求与传递参数" class="headerlink" title="1. 发送请求与传递参数"></a>1. 发送请求与传递参数</h2><p>带参数请求：<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#GET参数实例</span></div><div class="line">requests.get(<span class="string">'http://www.dict.baidu.com/s'</span>, params=&#123;<span class="string">'wd'</span>: <span class="string">'python'</span>&#125;)  </div><div class="line"><span class="comment">#或</span></div><div class="line">url = <span class="string">'http://www.baidu.com'</span></div><div class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</div><div class="line">headers = &#123; <span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;"</span>,</div><div class="line">            <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip"</span>,</div><div class="line">            <span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8"</span>,</div><div class="line">            <span class="string">"Referer"</span>:<span class="string">"http://www.example.com/"</span>,</div><div class="line">            <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36"</span></div><div class="line">            &#125;  </div><div class="line">res1 = requests.get(url, params=payload, headers=headers, timeout=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">#POST参数实例</span></div><div class="line">requests.post(<span class="string">'http://www.itwhy.org/wp-comments-post.php'</span>, data=&#123;<span class="string">'comment'</span>: <span class="string">'测试post'</span>&#125;)</div><div class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'touxiang.png'</span>, <span class="string">'rb'</span>)&#125; <span class="comment">#用于发送文件的post属性</span></div><div class="line">files = &#123;<span class="string">'file'</span>: (<span class="string">'xxxx,jpg'</span>,open(<span class="string">'/home/lyb/sjzl.mpg'</span>,<span class="string">'rb'</span>))&#125;  <span class="comment">#设置文件名</span></div><div class="line"><span class="comment">#或</span></div><div class="line">url = <span class="string">'http://www.baidu.com'</span></div><div class="line">data=&#123;<span class="string">"user"</span>:<span class="string">"user"</span>,<span class="string">"password"</span>:<span class="string">"pass"</span>&#125;</div><div class="line">res2 = requests.post(url1, data=data, headers=headers ,files=files)</div></pre></td></tr></table></figure></p>
<p>POST发送JSON数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">r = requests.post(<span class="string">'https://api.github.com/some/endpoint'</span>, data=json.dumps(&#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;))</div><div class="line"></div><div class="line">print(r.json())</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r = requests.get(<span class="string">'http://ip.taobao.com/service/getIpInfo.php?ip=122.88.60.28'</span>)</div><div class="line"><span class="keyword">print</span> (r.json()[<span class="string">'data'</span>][<span class="string">'country'</span>])</div></pre></td></tr></table></figure>
<p>添加代理：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">proxies = &#123;</div><div class="line">  <span class="string">"http"</span>: <span class="string">"http://10.10.1.10:3128"</span>,</div><div class="line">  <span class="string">"https"</span>: <span class="string">"http://10.10.1.10:1080"</span>,</div><div class="line">&#125;</div><div class="line">requests.get(<span class="string">"http://www.zhidaow.com"</span>, proxies=proxies)</div></pre></td></tr></table></figure></p>
<p>一些操作requests返回值的方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">r.text  <span class="comment">#字符串方式的响应体，会自动根据响应头部的字符编码进行解码</span></div><div class="line">r.content   <span class="comment">#获得二进制响应内容</span></div><div class="line">r.raw   <span class="comment">#获得原始响应内容,需要stream=True</span></div><div class="line">r.raw.read(<span class="number">50</span>)</div><div class="line">type(r.text)    <span class="comment">#返回解码成unicode的内容</span></div><div class="line">r.url</div><div class="line">r.history   <span class="comment">#追踪重定向</span></div><div class="line">r.cookies</div><div class="line">r.cookies[<span class="string">'example_cookie_name'</span>]</div><div class="line">r.headers   <span class="comment">#以字典对象存储服务器的响应头，但该字典比较特殊，字典键不区分大小写，若键不存在返回None</span></div><div class="line">r.headers[<span class="string">'Content-Type'</span>]</div><div class="line">r.headers.get(<span class="string">'content-type'</span>)</div><div class="line">r.json  <span class="comment">#讲返回内容编码为json</span></div><div class="line">r.encoding  <span class="comment">#返回内容编码</span></div><div class="line">r.status_code   <span class="comment">#返回http状态码</span></div><div class="line">r.raise_for_status()    <span class="comment">#返回错误状态码</span></div></pre></td></tr></table></figure></p>
<p>若编码出错，则<code>r.text.encode(&#39;utf-8&#39;)</code></p>
<hr>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session()"></a>Session()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初始化一个session对象</span></div><div class="line">s = requests.Session()</div><div class="line"></div><div class="line"><span class="comment">#使用这个session对象来进行访问</span></div><div class="line">prepped1 = requests.Request(<span class="string">'POST'</span>, url1,</div><div class="line">    data=data,</div><div class="line">    headers=headers</div><div class="line">).prepare()</div><div class="line">s.send(prepped1)</div><div class="line"><span class="comment">#或 r = s.post(url,data = user)</span></div></pre></td></tr></table></figure>
<p>其他的一些访问方式：</p>
<pre><code>&gt;&gt;&gt; r = requests.put(&quot;http://httpbin.org/put&quot;)
&gt;&gt;&gt; r = requests.delete(&quot;http://httpbin.org/delete&quot;)
&gt;&gt;&gt; r = requests.head(&quot;http://httpbin.org/get&quot;)
&gt;&gt;&gt; r = requests.options(&quot;http://httpbin.org/get&quot;)
</code></pre><hr>
<hr>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该笔记描述那么多方面，好像只是讲了requests模块的参数而已。这也说明了它的强大，但是前提是你必须懂对应的原理。参数如下：  </p>
<pre><code>json: json数据传到requests的body
headers: HTTP Headers的字典传到requests的header
cookies: 可以使用字典或者CookieJar object
files: 字典{&apos;name&apos;: file-tuple} 来实现multipart encoding upload, 2参数元组 (&apos;filename&apos;, fileobj), 3参数元组 (&apos;filename&apos;, fileobj, &apos;content_type&apos;)或者 4参数元组 (&apos;filename&apos;, fileobj, &apos;content_type&apos;, custom_headers), 其中&apos;content-type&apos; 用于定于文件类型和custom_headers文件的headers
auth: Auth元组定义用于Basic/Digest/Custom HTTP Auth
timeout: 连接等待时长
allow_redirects: 布尔型， True代表POST/PUT/DELETE只有的重定向是允许的
proxies: 代理的地址
verify: 用于认证SSL证书
stream: False代表返回内容立刻下载
cert: String代表ssl client证书地址(.pem) Tuple代表(&apos;cert&apos;, &apos;key&apos;)键值对
</code></pre><h2 id="其他参考资料："><a href="#其他参考资料：" class="headerlink" title="其他参考资料："></a>其他参考资料：</h2><p><a href="http://www.jianshu.com/p/2c2781462902" target="_blank" rel="external">网页数据压缩deflate&amp;gzip</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lxml学习笔记]]></title>
      <url>https://patrickphang.github.io/2017/01/03/lxml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>问题1：有一个XML文件，如何解析<br>问题2：解析后，如果查找、定位某个标签<br>问题3：定位后如何操作标签，比如访问属性、文本内容等<br><a id="more"></a><br><code>from lxml import etree</code> -&gt; 导入模块，该库常用的XML处理功能都在lxml.etree中  </p>
<h2 id="requests-lxml解析小"><a href="#requests-lxml解析小" class="headerlink" title="requests + lxml解析小"></a>requests + lxml解析小</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  </div><div class="line"><span class="keyword">import</span> requests  </div><div class="line">  </div><div class="line">page = <span class="number">1</span>  </div><div class="line">url = <span class="string">'http://www.jikexueyuan.com/course/?pageNum='</span> + str(page)  </div><div class="line">html = requests.get(url)  </div><div class="line">  </div><div class="line">selector = etree.HTML(html.text)  </div><div class="line">content_field = selector.xpath(<span class="string">'//div[@class="lesson-list"]/ul/li'</span>)  </div><div class="line"><span class="keyword">print</span> content_field</div></pre></td></tr></table></figure>
<h3 id="Element类"><a href="#Element类" class="headerlink" title="Element类"></a>Element类</h3><blockquote>
<p>Element是XML处理的核心类，Element对象可以直观的理解为XML的节点，大部分XML节点的处理都是围绕该类进行的。这部分包括三个内容：节点的操作、节点属性的操作、节点内文本的操作。</p>
</blockquote>
<h4 id="1-节点操作"><a href="#1-节点操作" class="headerlink" title="1. 节点操作"></a>1. 节点操作</h4><ol>
<li><p>创建Element对象<br>使用<code>Element</code>方法，参数即节点名称。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>root = etree.Element(<span class="string">'root'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root)</div><div class="line">&lt;Element root at <span class="number">0x2da0708</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>获取节点名称<br>使用<code>tag</code>属性，获取节点的名称。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.tag)</div><div class="line">root</div></pre></td></tr></table></figure>
</li>
<li><p>输出XML内容<br>使用<code>tostring</code>方法输出XML内容，参数为Element对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root))</div><div class="line"><span class="string">b'&lt;root&gt;&lt;child1/&gt;&lt;child2/&gt;&lt;child3/&gt;&lt;/root&gt;'</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加子节点<br>使用<code>SubElement</code>方法创建子节点，第一个参数为父节点（Element对象），第二个参数为子节点名称。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>child1 = etree.SubElement(root, <span class="string">'child1'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>child2 = etree.SubElement(root, <span class="string">'child2'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>child3 = etree.SubElement(root, <span class="string">'child3'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>删除子节点<br>使用<code>remove</code>方法删除指定节点，参数为Element对象。clear方法清空所有节点。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>root.remove(child1)  <span class="comment"># 删除指定子节点</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root))</div><div class="line"><span class="string">b'&lt;root&gt;&lt;child2/&gt;&lt;child3/&gt;&lt;/root&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root.clear()  <span class="comment"># 清除所有子节点</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root))</div><div class="line"><span class="string">b'&lt;root/&gt;'</span></div></pre></td></tr></table></figure>
</li>
<li><p>以列表的方式操作子节点<br>可以将Element对象的子节点视为列表进行各种操作：  </p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>child = root[<span class="number">0</span>]  <span class="comment"># 下标访问</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(child.tag)</div><div class="line">child1</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(root))  <span class="comment"># 子节点数量</span></div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root.index(child2)  <span class="comment"># 获取索引号</span></div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> child <span class="keyword">in</span> root:  <span class="comment"># 遍历</span></div><div class="line"><span class="meta">... </span>    print(child.tag)</div><div class="line">child1</div><div class="line">child2</div><div class="line">child3</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root.insert(<span class="number">0</span>, etree.Element(<span class="string">'child0'</span>))  <span class="comment"># 插入</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>start = root[:<span class="number">1</span>]  <span class="comment"># 切片</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>end = root[<span class="number">-1</span>:]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(start[<span class="number">0</span>].tag)</div><div class="line">child0</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(end[<span class="number">0</span>].tag)</div><div class="line">child3</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root.append( etree.Element(<span class="string">'child4'</span>) )  <span class="comment"># 尾部添加</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root))</div><div class="line"><span class="string">b'&lt;root&gt;&lt;child0/&gt;&lt;child1/&gt;&lt;child2/&gt;&lt;child3/&gt;&lt;child4/&gt;&lt;/root&gt;'</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取父节点<br>使用<code>getparent</code>方法可以获取父节点。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(child1.getparent().tag)</div><div class="line">root</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<hr>
<hr>
<h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><pre><code>属性是以key-value的方式存储的，就像字典一样。
</code></pre><h4 id="1-创建属性"><a href="#1-创建属性" class="headerlink" title="1. 创建属性"></a>1. 创建属性</h4><p>可以在创建Element对象时同步创建属性，第二个参数即为属性名和属性值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>root = etree.Element(<span class="string">'root'</span>, interesting=<span class="string">'totally'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root))</div><div class="line"><span class="string">b'&lt;root interesting="totally"/&gt;'</span></div><div class="line">也可以使用set方法给已有的Element对象添加属性，两个参数分别为属性名和属性值：</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root.set(<span class="string">'hello'</span>, <span class="string">'Huhu'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root))</div><div class="line"><span class="string">b'&lt;root interesting="totally" hello="Huhu"/&gt;'</span></div></pre></td></tr></table></figure></p>
<h4 id="2-获取属性"><a href="#2-获取属性" class="headerlink" title="2. 获取属性"></a>2. 获取属性</h4><p>属性是以key-value的方式存储的，就像字典一样。直接看例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># get方法获得某一个属性值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.get(<span class="string">'interesting'</span>))</div><div class="line">totally</div><div class="line"></div><div class="line"><span class="comment"># keys方法获取所有的属性名</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(root.keys())</div><div class="line">[<span class="string">'hello'</span>, <span class="string">'interesting'</span>]</div><div class="line"></div><div class="line"><span class="comment"># items方法获取所有的键值对</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, value <span class="keyword">in</span> sorted(root.items()):</div><div class="line"><span class="meta">... </span>    print(<span class="string">'%s = %r'</span> % (name, value))</div><div class="line">hello = <span class="string">'Huhu'</span></div><div class="line">interesting = <span class="string">'totally'</span></div></pre></td></tr></table></figure></p>
<p>也可以用attrib属性一次拿到所有的属性及属性值存于字典中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>attributes = root.attrib</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(attributes)</div><div class="line">&#123;<span class="string">'interesting'</span>: <span class="string">'totally'</span>, <span class="string">'hello'</span>: <span class="string">'Huhu'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>attributes[<span class="string">'good'</span>] = <span class="string">'Bye'</span>  <span class="comment"># 字典的修改影响节点</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.get(<span class="string">'good'</span>))</div><div class="line">Bye</div></pre></td></tr></table></figure></p>
<hr>
<hr>
<hr>
<h3 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h3><pre><code>标签及标签的属性操作介绍完了，最后就剩下标签内的文本了。可以使用text和tail属性、或XPath的方式来访问文本内容。
</code></pre><h4 id="1-text和tail属性"><a href="#1-text和tail属性" class="headerlink" title="1. text和tail属性"></a>1. text和tail属性</h4><p>一般情况，可以用Element的text属性访问标签的文本。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>root = etree.Element(<span class="string">'root'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root.text = <span class="string">'Hello, World!'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.text)</div><div class="line">Hello, World!</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root))</div><div class="line"><span class="string">b'&lt;root&gt;Hello, World!&lt;/root&gt;'</span></div></pre></td></tr></table></figure></p>
<p>XML的标签一般是成对出现的，有开有关，但像HTML则可能出现单一的标签，如下面这段代码中的<code>&lt;br/&gt;</code>。</p>
<p><code>&lt;html&gt;&lt;body&gt;Text&lt;br/&gt;Tail&lt;/body&gt;&lt;/html&gt;</code>  </p>
<p>Element类提供了tail属性支持单一标签的文本获取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>html = etree.Element(<span class="string">'html'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>body = etree.SubElement(html, <span class="string">'body'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>body.text = <span class="string">'Text'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(html))</div><div class="line"><span class="string">b'&lt;html&gt;&lt;body&gt;Text&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>br = etree.SubElement(body, <span class="string">'br'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(html))</div><div class="line"><span class="string">b'&lt;html&gt;&lt;body&gt;Text&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># tail仅在该标签后面追加文本</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>br.tail = <span class="string">'Tail'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(br))</div><div class="line"><span class="string">b'&lt;br/&gt;Tail'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(html))</div><div class="line"><span class="string">b'&lt;html&gt;&lt;body&gt;Text&lt;br/&gt;Tail&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># tostring方法增加method参数，过滤单一标签，输出全部文本</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(html, method=<span class="string">'text'</span>))</div><div class="line"><span class="string">b'TextTail'</span></div></pre></td></tr></table></figure></p>
<h4 id="2-XPath方式"><a href="#2-XPath方式" class="headerlink" title="2. XPath方式"></a>2. XPath方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方式一：过滤单一标签，返回文本</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(html.xpath(<span class="string">'string()'</span>))</div><div class="line">TextTail</div><div class="line"></div><div class="line"><span class="comment"># 方式二：返回列表，以单一标签为分隔</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(html.xpath(<span class="string">'//text()'</span>))</div><div class="line">[<span class="string">'Text'</span>, <span class="string">'Tail'</span>]</div></pre></td></tr></table></figure>
<p>方法二获得的列表，每个元素都会带上它所属节点及文本类型信息，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>texts = html.xpath(<span class="string">'//text()'</span>))</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(texts[<span class="number">0</span>])</div><div class="line">Text</div><div class="line"><span class="comment"># 所属节点</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>parent = texts[<span class="number">0</span>].getparent()  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(parent.tag)</div><div class="line">body</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(texts[<span class="number">1</span>], texts[<span class="number">1</span>].getparent().tag)</div><div class="line">Tail br</div><div class="line"></div><div class="line"><span class="comment"># 文本类型：是普通文本还是tail文本</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(texts[<span class="number">0</span>].is_text)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(texts[<span class="number">1</span>].is_text)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(texts[<span class="number">1</span>].is_tail)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<hr>
<hr>
<hr>
<h3 id="文件解析与输出"><a href="#文件解析与输出" class="headerlink" title="文件解析与输出"></a>文件解析与输出</h3><blockquote>
<p>这部分讲述如何将XML文件解析为Element对象，以及如何将Element对象输出为XML文件。</p>
</blockquote>
<h4 id="1-文件解析"><a href="#1-文件解析" class="headerlink" title="1. 文件解析"></a>1. 文件解析</h4><p>文件解析常用的有fromstring、XML和HTML三个方法。接受的参数都是字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>xml_data = <span class="string">'&lt;root&gt;data&lt;/root&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># fromstring方法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root1 = etree.fromstring(xml_data)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root1.tag)</div><div class="line">root</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root1))</div><div class="line"><span class="string">b'&lt;root&gt;data&lt;/root&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># XML方法，与fromstring方法基本一样</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root2 = etree.XML(xml_data)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root2.tag)</div><div class="line">root</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root2))</div><div class="line"><span class="string">b'&lt;root&gt;data&lt;/root&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># HTML方法，如果没有&lt;html&gt;和&lt;body&gt;标签，会自动补上</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>root3 = etree.HTML(xml_data)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root3.tag)</div><div class="line">html</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root3))</div><div class="line"><span class="string">b'&lt;html&gt;&lt;body&gt;&lt;root&gt;data&lt;/root&gt;&lt;/body&gt;&lt;/html&gt;'</span></div></pre></td></tr></table></figure></p>
<h4 id="2-输出"><a href="#2-输出" class="headerlink" title="2. 输出"></a>2. 输出</h4><p>输出其实就是前面一直在用的tostring方法了，这里补充xml_declaration和encoding两个参数，前者是XML声明，后者是指定编码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>root = etree.XML(<span class="string">'&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root))</div><div class="line"><span class="string">b'&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># XML声明</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root, xml_declaration=<span class="keyword">True</span>))</div><div class="line"><span class="string">b"&lt;?xml version='1.0' encoding='ASCII'?&gt;\n&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;"</span></div><div class="line"></div><div class="line"><span class="comment"># 指定编码</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(etree.tostring(root, encoding=<span class="string">'iso-8859-1'</span>))</div><div class="line"><span class="string">b"&lt;?xml version='1.0' encoding='iso-8859-1'?&gt;\n&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;"</span></div></pre></td></tr></table></figure></p>
<hr>
<hr>
<hr>
<h3 id="ElementPath"><a href="#ElementPath" class="headerlink" title="ElementPath"></a>ElementPath</h3><p>讲ElementPath前，需要引入ElementTree类，一个ElementTree对象可理解为一个完整的XML树，每个节点都是一个Element对象。而ElementPath则相当于XML中的XPath。用于搜索和定位Element元素。</p>
<p>这里介绍两个常用方法，可以满足大部分搜索、查询需求，它们的参数都是XPath语句：<br>findall()：返回所有匹配的元素，返回列表<br>find()：返回匹配到的第一个元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>root = etree.XML(<span class="string">"&lt;root&gt;&lt;a x='123'&gt;aText&lt;b/&gt;&lt;c/&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查找第一个b标签</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.find(<span class="string">'b'</span>))</div><div class="line"><span class="keyword">None</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.find(<span class="string">'a'</span>).tag)</div><div class="line">a</div><div class="line"></div><div class="line"><span class="comment"># 查找所有b标签，返回Element对象组成的列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[ b.tag <span class="keyword">for</span> b <span class="keyword">in</span> root.findall(<span class="string">'.//b'</span>) ]</div><div class="line">[<span class="string">'b'</span>, <span class="string">'b'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 根据属性查询</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.findall(<span class="string">'.//a[@x]'</span>)[<span class="number">0</span>].tag)</div><div class="line">a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.findall(<span class="string">'.//a[@y]'</span>))</div><div class="line">[]</div></pre></td></tr></table></figure></p>
<h1 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h1><p><a href="http://www.jianshu.com/p/f446663c970f" target="_blank" rel="external">Python lxml教程-SKYue</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://www.cnblogs.com/descusr/archive/2012/06/20/2557075.html" target="_blank" rel="external">用lxml解析HTML</a></li>
<li><a href="http://www.cnblogs.com/giserliu/p/4399778.html" target="_blank" rel="external">Python中利用xpath解析HTML</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[urllib库的常见用法]]></title>
      <url>https://patrickphang.github.io/2017/01/03/urllib%E5%BA%93%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>先导入三个包：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> urllib.parse</div><div class="line"><span class="keyword">import</span> http.cookiejar</div></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p>最简单的urlopen()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">url = <span class="string">"http://www.baidu.com"</span>         </div><div class="line">response = urllib.request.urlopen(url)</div><div class="line">print(response.read())</div></pre></td></tr></table></figure></p>
<h3 id="1-构造headers"><a href="#1-构造headers" class="headerlink" title="1. 构造headers"></a>1. 构造headers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">user_agent = <span class="string">''</span></div><div class="line">cookie = <span class="string">''</span></div><div class="line">referer = <span class="string">''</span></div><div class="line">host = <span class="string">''</span></div><div class="line">content_type = <span class="string">''</span></div></pre></td></tr></table></figure>
<h3 id="2-构造Request实例对象"><a href="#2-构造Request实例对象" class="headerlink" title="2. 构造Request实例对象"></a>2. 构造Request实例对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">url = <span class="string">'http://www.baidu.com'</span></div><div class="line">values = &#123;<span class="string">'name'</span> : <span class="string">'Michael Foord'</span>,</div><div class="line">          <span class="string">'location'</span> :<span class="string">'Northampton'</span>,</div><div class="line">          <span class="string">'language'</span> :<span class="string">'Python'</span> &#125;</div><div class="line">headers=&#123;<span class="string">'User-Agent'</span>:user_agent,<span class="string">'Cookie'</span>:cookie,<span class="string">'Referer'</span>:referer,<span class="string">'Host'</span>:host,<span class="string">'Content-Type'</span>:content_type&#125;</div></pre></td></tr></table></figure>
<h3 id="3-HTTP高级方法"><a href="#3-HTTP高级方法" class="headerlink" title="3. HTTP高级方法"></a>3. HTTP高级方法</h3><h3 id="①使用Proxy代理"><a href="#①使用Proxy代理" class="headerlink" title="①使用Proxy代理"></a>①使用Proxy代理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">proxy_handler = urllib.request.ProxyHandler(&#123;<span class="string">'http'</span>: <span class="string">'http://www.example.com:3128/'</span>&#125;)</div><div class="line">opener = urllib.request.build_opener(proxy_handler)</div></pre></td></tr></table></figure>
<h3 id="②使用cookiejar"><a href="#②使用cookiejar" class="headerlink" title="②使用cookiejar"></a>②使用cookiejar</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cookie_jar = http.cookiejar.CookieJar()</div><div class="line">cookie_jar_handler = urllib.request.HTTPCookieProcessor(cookiejar=cookie_jar)</div><div class="line"></div><div class="line">opener.add_handler(cookie_jar_handler)</div></pre></td></tr></table></figure>
<h3 id="③发送"><a href="#③发送" class="headerlink" title="③发送"></a>③发送</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1.安装全局opener，然后利用urlopen打开url   </span></div><div class="line">urllib.request.install_opener(opener)                   </div><div class="line">response = urllib.request.urlopen(url)</div><div class="line"></div><div class="line"><span class="comment"># 2.直接利用opener实例打开url:</span></div><div class="line">response = opener.open(url)</div></pre></td></tr></table></figure>
<h3 id="4-抓取网页"><a href="#4-抓取网页" class="headerlink" title="4. 抓取网页"></a>4. 抓取网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">data = urllib.parse.urlencode(values).encode(<span class="string">'utf-8'</span>)  </div><div class="line"></div><div class="line">req = urllib.request.Request(url,data,headers)</div><div class="line"><span class="comment">#或req.add_header('Referer', 'http://www.baidu.com')</span></div><div class="line"><span class="comment">#  req.add_header('Origin', 'https://passport.weibo.cn')</span></div><div class="line"><span class="comment">#  req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X)...')</span></div><div class="line"></div><div class="line">response = urllib.request.urlopen(req,timeout=<span class="number">10</span>)</div><div class="line">the_page = response.read().decode(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<p>或者这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data = urllib.parse.urlencode(&#123;<span class="string">"act"</span>: <span class="string">"login"</span>, <span class="string">"email"</span>: <span class="string">"xianhu@qq.com"</span>, <span class="string">"password"</span>: <span class="string">"123456"</span>&#125;)</div><div class="line">request1 = urllib.request.Request(url,data=data,headers)    <span class="comment"># POST方法</span></div><div class="line">request2 = urllib.request.Request(url+<span class="string">"?%s"</span> % data)         <span class="comment"># GET方法</span></div></pre></td></tr></table></figure></p>
<hr>
<hr>
<hr>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#抓取网页中的图片：同样适用于抓取网络上的文件。右击鼠标，找到图片属性中的地址，然后进行保存。</span></div><div class="line">response = urllib.request.urlopen(<span class="string">"http://ww3.sinaimg.cn/large/7d742c99tw1ee.jpg"</span>,timeout=<span class="number">120</span>)</div><div class="line"><span class="keyword">with</span> open(<span class="string">"test.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file_img:</div><div class="line">    file_img.write(response.read())</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># HTTP认证：即HTTP身份验证</span></div><div class="line">password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()     <span class="comment"># 创建一个PasswordMgr</span></div><div class="line">password_mgr.add_password(realm=<span class="keyword">None</span>, uri=url, user=<span class="string">'username'</span>, passwd=<span class="string">'password'</span>)   <span class="comment"># 添加用户名和密码</span></div><div class="line">handler = urllib.request.HTTPBasicAuthHandler(password_mgr)         <span class="comment"># 创建HTTPBasicAuthHandler</span></div><div class="line">opener = urllib.request.build_opener(handler)                       <span class="comment"># 创建opner</span></div><div class="line">response = opener.open(url, timeout=<span class="number">10</span>)                             <span class="comment"># 获取数据</span></div></pre></td></tr></table></figure>
<hr>
<p>gzip压缩：<br>在header中加入：<code>&#39;request.add_header(&#39;Accept-encoding&#39;, &#39;gzip&#39;)&#39;</code><br>这是关键:创建Request对象，添加一个 Accept-encoding 头信息告诉服务器你能接受 gzip 压缩数据</p>
<p>然后就是解压缩数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">import</span> gzip</div><div class="line"></div><div class="line">compresseddata = f.read()</div><div class="line">compressedstream = StringIO.StringIO(compresseddata)</div><div class="line">gzipper = gzip.GzipFile(fileobj=compressedstream)</div><div class="line"><span class="keyword">print</span> gzipper.read()</div></pre></td></tr></table></figure></p>
<hr>
<p>多线程爬取：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="comment"># q是任务队列</span></div><div class="line"><span class="comment">#NUM是并发线程总数</span></div><div class="line"><span class="comment">#JOBS是有多少任务</span></div><div class="line">q = Queue()</div><div class="line">NUM = <span class="number">2</span></div><div class="line">JOBS = <span class="number">10</span></div><div class="line"><span class="comment">#具体的处理函数，负责处理单个任务</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_somthing_using</span><span class="params">(arguments)</span>:</span></div><div class="line">    <span class="keyword">print</span> arguments</div><div class="line"><span class="comment">#这个是工作进程，负责不断从队列取数据并处理</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">working</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        arguments = q.get()</div><div class="line">        do_somthing_using(arguments)</div><div class="line">        sleep(<span class="number">1</span>)</div><div class="line">        q.task_done()</div><div class="line"><span class="comment">#fork NUM个线程等待队列</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(NUM):</div><div class="line">    t = Thread(target=working)</div><div class="line">    t.setDaemon(<span class="keyword">True</span>)</div><div class="line">    t.start()</div><div class="line"><span class="comment">#把JOBS排入队列</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(JOBS):</div><div class="line">    q.put(i)</div><div class="line"><span class="comment">#等待所有JOBS完成</span></div><div class="line">q.join()</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用pytesseract识别简单验证码]]></title>
      <url>https://patrickphang.github.io/2017/01/03/%E4%BD%BF%E7%94%A8pytesseract%E8%AF%86%E5%88%AB%E7%AE%80%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> pytesseract</div><div class="line"><span class="keyword">from</span> pytesseract <span class="keyword">import</span> *</div><div class="line"></div><div class="line">rep=&#123;<span class="string">'O'</span>:<span class="string">'0'</span>,                           <span class="comment">#替换列表</span></div><div class="line">    <span class="string">'I'</span>:<span class="string">'1'</span>,<span class="string">'L'</span>:<span class="string">'1'</span>,</div><div class="line">    <span class="string">'Z'</span>:<span class="string">'2'</span>,</div><div class="line">    <span class="string">'S'</span>:<span class="string">'8'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initTable</span><span class="params">(threshold=<span class="number">140</span>)</span>:</span>           <span class="comment"># 二值化函数</span></div><div class="line">    table = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</div><div class="line">        <span class="keyword">if</span> i &lt; threshold:</div><div class="line">            table.append(<span class="number">0</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            table.append(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> table</div><div class="line"><span class="comment">#--------------------------------------------------------------------------------------</span></div><div class="line">im = Image.open(<span class="string">'C:/Users/asus-pc/Desktop/Captcha.jpg'</span>)     <span class="comment">#1.打开图片</span></div><div class="line">im = im.convert(<span class="string">'L'</span>)                                        <span class="comment">#2.将彩色图像转化为灰度图</span></div><div class="line">binaryImage = im.point(initTable(), <span class="string">'1'</span>)                    <span class="comment">#3.降噪，图片二值化</span></div><div class="line"><span class="comment"># binaryImage.show()</span></div><div class="line"></div><div class="line">text = image_to_string(binaryImage, config=<span class="string">'-psm 7'</span>)</div><div class="line"></div><div class="line"><span class="comment">#4.对于识别结果，常进行一些替换操作</span></div><div class="line"><span class="keyword">for</span> r <span class="keyword">in</span> rep:</div><div class="line">    text = text.replace(r,rep[r])</div><div class="line"></div><div class="line"><span class="comment">#5.打印识别结果</span></div><div class="line">print(text)</div></pre></td></tr></table></figure>
<h1 id="别人写的"><a href="#别人写的" class="headerlink" title="别人写的"></a>别人写的</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> pytesseract</div><div class="line"><span class="keyword">from</span> pytesseract <span class="keyword">import</span> *</div><div class="line"></div><div class="line">rep=&#123;<span class="string">'O'</span>:<span class="string">'0'</span>,                           <span class="comment">#替换列表</span></div><div class="line">    <span class="string">'I'</span>:<span class="string">'1'</span>,<span class="string">'L'</span>:<span class="string">'1'</span>,</div><div class="line">    <span class="string">'Z'</span>:<span class="string">'2'</span>,</div><div class="line">    <span class="string">'S'</span>:<span class="string">'8'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initTable</span><span class="params">(threshold=<span class="number">140</span>)</span>:</span>           <span class="comment"># 二值化函数</span></div><div class="line">    table = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</div><div class="line">        <span class="keyword">if</span> i &lt; threshold:</div><div class="line">            table.append(<span class="number">0</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            table.append(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> table</div><div class="line"><span class="comment">#--------------------------------------------------------------------------------------</span></div><div class="line">im = Image.open(<span class="string">'C:/Users/asus-pc/Desktop/Captcha.jpg'</span>)     <span class="comment">#1.打开图片</span></div><div class="line">im = im.convert(<span class="string">'L'</span>)                                        <span class="comment">#2.将彩色图像转化为灰度图</span></div><div class="line">binaryImage = im.point(initTable(), <span class="string">'1'</span>)                    <span class="comment">#3.降噪，图片二值化</span></div><div class="line"><span class="comment"># binaryImage.show()</span></div><div class="line"></div><div class="line">text = image_to_string(binaryImage, config=<span class="string">'-psm 7'</span>)</div><div class="line"></div><div class="line"><span class="comment">#4.对于识别结果，常进行一些替换操作</span></div><div class="line"><span class="keyword">for</span> r <span class="keyword">in</span> rep:</div><div class="line">    text = text.replace(r,rep[r])</div><div class="line"></div><div class="line"><span class="comment">#5.打印识别结果</span></div><div class="line">print(text)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[创建Python虚拟环境]]></title>
      <url>https://patrickphang.github.io/2017/01/03/%E5%88%9B%E5%BB%BAPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="1-创建python虚拟环境："><a href="#1-创建python虚拟环境：" class="headerlink" title="1. 创建python虚拟环境："></a>1. 创建python虚拟环境：</h2><ol>
<li><p>最简单地创建python虚拟环境：</p>
<a id="more"></a> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv [虚拟环境名称]</div></pre></td></tr></table></figure>
</li>
<li><p>如果你的系统里安装有不同版本的python，可以使用–python参数指定虚拟环境的python版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; virtualenv [虚拟环境名称] --no-site-packages --python=C:/Users/asus-pc/AppData/Local/Programs/Python/Python35/python.exe</div></pre></td></tr></table></figure>
</li>
<li><p>依赖系统环境的第三方软件包：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; virtualenv --system-site-packages [虚拟环境名称]</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-进入虚拟环境目录，启动虚拟环境："><a href="#2-进入虚拟环境目录，启动虚拟环境：" class="headerlink" title="2.  进入虚拟环境目录，启动虚拟环境："></a>2.  进入虚拟环境目录，启动虚拟环境：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; cd env1/</div><div class="line">&gt;&gt; source bin/activate 或 ./Scripts/activate   #前面为Linux 后面为Windows</div><div class="line">&gt;&gt; python -V</div></pre></td></tr></table></figure>
<h2 id="3-退出虚拟环境"><a href="#3-退出虚拟环境" class="headerlink" title="3. 退出虚拟环境"></a>3. 退出虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; deactivate</div><div class="line">或</div><div class="line">&gt;&gt; ./Scripts/deactivate</div></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<h1 id="使用virtualenvwrapper"><a href="#使用virtualenvwrapper" class="headerlink" title="使用virtualenvwrapper"></a>使用virtualenvwrapper</h1><ol>
<li><p>安装virtualenvwrapper</p>
<ol>
<li>创建一个文件夹，用于存放所有的虚拟环境：<code>mkdir ~/workspaces</code>  </li>
<li>设置环境变量，把下面两行添加到~/.bashrc里,然后就可以使用virtualenvwrapper了：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export WORKON_HOME=~/workspaces</div><div class="line">source /usr/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>创建虚拟环境：<code>mkvirtualenv [虚拟环境名称]</code>  </p>
</li>
<li>列出虚拟环境：<code>lsvirtualenv -b</code></li>
<li>切换虚拟环境：<code>workon [虚拟环境名称]</code></li>
<li>查看环境里安装了哪些包：<code>lssitepackages</code></li>
<li>进入当前环境的目录：<code>cdvirtualenv [子目录名]</code><br> 进入当前环境的site-packages目录：<code>cdsitepackages [子目录名]</code><br> 控制环境是否使用global site-packages：<code>toggleglobalsitepackages</code>  </li>
<li>复制虚拟环境：<code>cpvirtualenv [source] [dest]</code>    </li>
<li>退出虚拟环境：<code>deactivate</code>  </li>
<li>删除虚拟环境：<code>rmvirtualenv [虚拟环境名称]</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>https://patrickphang.github.io/2017/01/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>python re模块重要函数变量:</p>
<pre><code>1. compile() 根据正则表达式字符串，创建模式的对象。  
2. search() 在字符串中寻找模式。  
3. match() 在字符串开始处匹配模式。  
4. split() 根据模式的匹配项来分割字符串。  
5. findall() 显示出字符串中模式的所有匹配项。  
6. sub(old,new) 方法的功能是，用将所有old的匹配项用new替换掉。  
7. escape() 将字符串中所有特殊正则表达式字符转义。  
</code></pre><a id="more"></a> 
<ol>
<li><p><code>re.compile</code>:可以把正则表达式编译成一个正则表达式对象。可以把那些经常使用的正则表达式编译成正则表达式对象，这样可以提高一定的效率。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">text = <span class="string">"JGood is a handsome boy, he is cool, clever, and so on..."</span></div><div class="line">regex = re.compile(<span class="string">r'\w*oo\w*'</span>)</div><div class="line"><span class="keyword">print</span> regex.findall(text)   <span class="comment">#查找所有包含'oo'的单词</span></div><div class="line"><span class="keyword">print</span> regex.sub(<span class="keyword">lambda</span> m: <span class="string">'['</span> + m.group(<span class="number">0</span>) + <span class="string">']'</span>, text) <span class="comment">#将字符串中含有'oo'的单词用[]括起来。</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>re.split()</code>:会根据模式的匹配项来分割字符串，类似于我们字符串的split方法，不过它是用完整的正则表达式来替代了固定的分隔符。<br><code>re.split(r&#39;\s+&#39;, text)</code>将字符串按空格分割成一个单词列表。</p>
</li>
<li><p><code>re.findall</code>:可以获取字符串中所有匹配的字符串。<br><code>re.findall(r&#39;\w*oo\w*&#39;, text)</code>获取字符串中，包含’oo’的所有单词。</p>
</li>
<li><p><code>re.sub()</code>用于替换字符串中的匹配项。<br>下面一个例子将字符串中的空格 ‘ ‘ 替换成 ‘-‘ :  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">text = <span class="string">"JGood is a handsome boy, he is cool, clever, and so on..."</span></div><div class="line"><span class="keyword">print</span> re.sub(<span class="string">r'\s+'</span>, <span class="string">'-'</span>, text)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>re.sub的函数原型为：re.sub(pattern, repl, string, count)<br>其中第二个函数是替换后的字符串；本例中为’-‘<br>第四个参数指替换个数。默认为0，表示每个匹配项都替换。<br>re.sub还允许使用函数对匹配项的替换进行复杂的处理。<br>如：<code>re.sub(r&#39;\s&#39;, lambda m: &#39;[&#39; + m.group(0) + &#39;]&#39;, text, 0)</code>将字符串中的空格’ ‘替换为’[ ]’。</p>
<ol>
<li><code>re.match()</code>:尝试从字符串的开始匹配一个模式，如：下面的例子匹配第一个单词<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">text = <span class="string">"JGood is a handsome boy, he is cool, clever, and so on..."</span></div><div class="line">m = re.match(<span class="string">r"(\w+)\s"</span>, text)</div><div class="line"><span class="keyword">if</span> m:</div><div class="line"><span class="keyword">print</span> m.group(<span class="number">0</span>), <span class="string">'\n'</span>, m.group(<span class="number">1</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">'not match'</span>```  </div><div class="line">re.match的函数原型为：re.match(pattern, string, flags)</div><div class="line">第一个参数是正则表达式，这里为<span class="string">"(\w+)\s"</span>，如果匹配成功，则返回一个Match，否则返回一个<span class="keyword">None</span>；</div><div class="line">第二个参数表示要匹配的字符串；</div><div class="line">第三个参数是标致位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</div><div class="line"></div><div class="line"><span class="number">5.</span> `re.search()`:会在字符串内查找模式匹配,只到找到第一个匹配然后返回，若字符串无匹配，则返回<span class="keyword">None</span>。  </div><div class="line">`re.search()`的函数原型为:`re.search(pattern, string, flags)`.每个参数的含意与re.match一样。</div></pre></td></tr></table></figure>
</li>
</ol>
<p>import re<br>text = “JGood is a handsome boy, he is cool, clever, and so on…”<br>m = re.search(r’\shan(ds)ome\s’, text)<br>if m:<br>print m.group(0), m.group(1)<br>else:<br>print ‘not search’ ```</p>
<p>re.match与re.search的区别：re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>
<hr>
<pre><code>1. (\b)代表着单词的开头或结尾，也就是单词的分界处
2. (.)匹配除了换行符以外的任意字符
3. (*)代表的不是字符，不是位置，而是数量。它指定*前边的内容可连续重复使用任意次以使整个表达式得到匹配  
4. 为了避免重复，可以这样写：0\d{2}-\d{8}。这里\d后面的{2}({8})的意思是前面\d必须连续重复匹配2次(8次)
5. (\s)匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等
6. (\w)匹配字母或数字或下划线或汉字等
</code></pre><hr>
<pre><code>表1.常用的元字符
代码    说明
.    匹配除换行符以外的任意字符
\w    匹配字母或数字或下划线或汉字
\s    匹配任意的空白符
\d    匹配数字
\b    匹配单词的开始或结束
^    匹配字符串的开始
$    匹配字符串的结束
|   或指明一个非贪婪限定符
\   将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符  
()  标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。  
[   标记一个中括号表达式的开始  
{   标记限定符表达式的开始    
</code></pre><hr>
<pre><code>表2.常用的限定符
代码/语法          说明
*             重复零次或更多次
+             重复一次或更多次
?             重复零次或一次,或指明一个非贪婪限定符
{n}             重复n次
{n,}         重复n次或更多次
{m,n}         重复m到n次
</code></pre><p>字符转义：使用\来取消这些字符的特殊意义。</p>
<p>字符类：要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？<br>很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。<br>我们也可以轻松地指定一个字符范围，像[0-9]代表的含意与\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\w（如果只考虑英文的话）。  </p>
<p>分枝条件:用|把不同的规则分隔开。</p>
<p>分组：如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)。</p>
<pre><code>表3.常用的反义代码
代码/语法    说明
\W        匹配任意不是字母，数字，下划线，汉字的字符
\S        匹配任意不是空白符的字符
\D        匹配任意非数字的字符
\B        匹配不是单词开头或结束的位置
[^x]        匹配除了x以外的任意字符
[^aeiou]    匹配除了aeiou这几个字母以外的任意字符
</code></pre><hr>
<p>后向引用：用于重复搜索前面某个分组匹配的文本。<br>例如，\1代表分组1匹配的文本。<br>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。<br>你也可以自己指定子表达式的组名。<br>要指定一个子表达式的组名，请使用这样的语法：(?<word>\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。<br>要反向引用这个分组捕获的内容，你可以使用\k<word>,所以上一个例子也可以写成这样：\b(?<word>\w+)\b\s+\k<word>\b。</word></word></word></word></p>
<hr>
<pre><code>表4.常用分组语法
分类        代码/语法    说明
捕获        (exp)        匹配exp,并捕获文本到自动命名的组里
        (?&lt;name&gt;exp)    匹配exp,并捕获文本到名称为name的组里，也可以写成(?&apos;name&apos;exp)
        (?:exp)        匹配exp,不捕获匹配的文本，也不给此分组分配组号
零宽断言    (?=exp)        匹配exp前面的位置
        (?&lt;=exp)    匹配exp后面的位置
        (?!exp)        匹配后面跟的不是exp的位置
        (?&lt;!exp)    匹配前面不是exp的位置
注释        (?#comment)    这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读
</code></pre><p>零宽断言：用于查找在某些内容(但并不包括这些内容)之前或之后的东西。<br>(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。<br>(?&lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。  </p>
<p>负向零宽断言：只是想要确保某个字符没有出现，但并不想去匹配它时。<br>零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。<br>同理，我们可以用(?&lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。  </p>
<p>注释:(?#comment)</p>
<hr>
<p>贪婪与懒惰:<br>贪婪匹配:匹配尽可能多的字符。<br>懒惰匹配:匹配尽可能少的字符。用法：前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。<br><code>a.*?b</code>匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。<br>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。  </p>
<pre><code>表5.懒惰限定符
代码/语法    说明
*?    重复任意次，但尽可能少重复
+?    重复1次或更多次，但尽可能少重复
??    重复0次或1次，但尽可能少重复
{n,m}?    重复n到m次，但尽可能少重复
{n,}?    重复n次以上，但尽可能少重复

表6.常用的处理选项
名称    说明
IgnoreCase(忽略大小写)    匹配时不区分大小写。
Multiline(多行模式)    更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)
Singleline(单行模式)    更改.的含义，使它与每一个字符匹配（包括换行符\n）。
IgnorePatternWhitespace(忽略空白)    忽略表达式中的非转义空白并启用由#标记的注释。
ExplicitCapture(显式捕获)    仅捕获已被显式命名的组。
</code></pre><hr>
<pre><code>表7.尚未详细讨论的语法
代码/语法    说明
\a    报警字符(打印它的效果是电脑嘀一声)
\b    通常是单词分界位置，但如果在字符类里使用代表退格
\t    制表符，Tab
\r    回车
\v    竖向制表符
\f    换页符
\n    换行符
\e    Escape
\0nn    ASCII代码中八进制代码为nn的字符
\xnn    ASCII代码中十六进制代码为nn的字符
\unnnn    Unicode代码中十六进制代码为nnnn的字符
\cN    ASCII控制字符。比如\cC代表Ctrl+C
\A    字符串开头(类似^，但不受处理多行选项的影响)
\Z    字符串结尾或行尾(不受处理多行选项的影响)
\z    字符串结尾(类似$，但不受处理多行选项的影响)
\G    当前搜索的开头
\p{name}    Unicode中命名为name的字符类，例如\p{IsGreek}
(?&gt;exp)    贪婪子表达式
(?&lt;x&gt;-&lt;y&gt;exp)    平衡组
(?im-nsx:exp)    在子表达式exp中改变处理选项
(?im-nsx)    为表达式后面的部分改变处理选项
(?(exp)yes|no)    把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no
(?(exp)yes)    同上，只是使用空表达式作为no
(?(name)yes|no)    如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no
(?(name)yes)    同上，只是使用空表达式作为no
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用codecs模块解决文件编码问题]]></title>
      <url>https://patrickphang.github.io/2017/01/03/%E4%BD%BF%E7%94%A8codecs%E6%A8%A1%E5%9D%97%E8%A7%A3%E5%86%B3%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="错误用例"><a href="#错误用例" class="headerlink" title="错误用例"></a>错误用例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#http://www.qiushibaike.com/8hr/page/1?s=4603425</span></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">page=<span class="number">1</span></div><div class="line">xiubai=open(<span class="string">r'xiubai.txt'</span>,<span class="string">'w+'</span>)</div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    url=<span class="string">"http://www.qiushibaike.com/8hr/page/"</span>+str(page)+<span class="string">"?s=4603425"</span></div><div class="line">    soup = BeautifulSoup(urllib2.urlopen(url).read())</div><div class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> soup.findAll(<span class="string">"div"</span>, <span class="string">"content"</span>, title=<span class="keyword">True</span>):</div><div class="line">        xiubai.write(result.text)</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h4 id="操作文件，读写数据，涉及到非ASCII的话，最好用codes模块操作，其会自动帮你处理不同的编码，效果最好。"><a href="#操作文件，读写数据，涉及到非ASCII的话，最好用codes模块操作，其会自动帮你处理不同的编码，效果最好。" class="headerlink" title="操作文件，读写数据，涉及到非ASCII的话，最好用codes模块操作，其会自动帮你处理不同的编码，效果最好。"></a>操作文件，读写数据，涉及到非ASCII的话，最好用codes模块操作，其会自动帮你处理不同的编码，效果最好。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> codecs;</div><div class="line">yourStrToSave = <span class="string">"your data string"</span>;</div><div class="line"><span class="comment"># 'a+': read,write,append</span></div><div class="line"><span class="comment"># 'w' : clear before, then write</span></div><div class="line">outputFp = codecs.open(<span class="string">"outputFile.txt"</span>, <span class="string">'w'</span>, <span class="string">'utf-8'</span>);</div><div class="line">outputFp.write(yourStrToSave);</div><div class="line">outputFp.flush();</div><div class="line">outputFp.close();</div></pre></td></tr></table></figure>
<h4 id="对于你此处获得html，并用bs处理html的过程，实际上更好的做法："><a href="#对于你此处获得html，并用bs处理html的过程，实际上更好的做法：" class="headerlink" title="对于你此处获得html，并用bs处理html的过程，实际上更好的做法："></a>对于你此处获得html，并用bs处理html的过程，实际上更好的做法：</h4><ol>
<li>搞清楚本身html的charset<br><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</code></li>
<li>传递给BeautifulSoup去解析为soup<br><code>soup = BeautifuSoup(yourHtml,fromEncoding=&quot;GBK&quot;)</code></li>
<li>从find处理的soup节点，通过get_text()获得对应的内容</li>
<li>将获得的字符串内容，用codes保存到文件</li>
</ol>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> codecs;</div><div class="line"></div><div class="line"><span class="comment"># 'a+': read,write,append</span></div><div class="line"><span class="comment"># 'w' : clear before, then write</span></div><div class="line">outputFp = codecs.open(<span class="string">"outputFile.txt"</span>, mode=<span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>);</div><div class="line"><span class="keyword">for</span> result <span class="keyword">in</span> soup.findAll(<span class="string">"div"</span>, <span class="string">"content"</span>, title=<span class="keyword">True</span>):</div><div class="line">    outputFp.write(result.get_text())</div><div class="line">outputFp.flush();</div><div class="line">outputFp.close();</div></pre></td></tr></table></figure>
<p>其中，bs中通过get_text()得到的字符串，已经是unicode了</p>
]]></content>
    </entry>
    
  
  
</search>
